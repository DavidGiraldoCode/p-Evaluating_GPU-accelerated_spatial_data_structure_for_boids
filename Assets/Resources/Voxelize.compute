// All the functions that are going to the excecuted in the GPU
// They name numbers that are called from the Dispatch(# , x,y,z)
#pragma kernel CS_Clear         // 0
#pragma kernel CS_VoxelizeMesh  // 1
#pragma kernel CS_Seed          // 2
#pragma kernel CS_FillStep      // 3
#pragma kernel CS_PingPong      // 4

//New pragma for querying point on voxels
#pragma kernel CS_QueryPosition // 5
#pragma kernel CS_RayAABBIntersections //6

// New Hashing obstacles
#pragma kernel CS_HashObstaclesInGrid //7

// The buffers are send on each frame every time we want to use the voxel grid in some way
// They just represent an array of ints
RWStructuredBuffer<int> _Voxels;
RWStructuredBuffer<int> _SmokeVoxels;
RWStructuredBuffer<int> _StaticVoxels;
RWStructuredBuffer<int> _PingVoxels;

RWStructuredBuffer<int> _ObstaclesCounterVoxels; // Voxels that counte how many obstacle probes they have inside
StructuredBuffer<float3> _ObstacleProbesPositions; // A buffer containing the position of all the obstacle probes.
uint _ObstacleProbesCount;

// const uint MAX_OBSTACLE_COUNT = 20;
// struct hashed_obstacle // Recall types cannot contain members of their own type
// {
//     uint real_indexes[20]; // Is is arbitrary asigned.
// };
RWStructuredBuffer<int2> _PivotsTableBuffer;
RWStructuredBuffer<int2> _HashedObstacleNodes;

RWStructuredBuffer<uint> _ObstacleIndexBuffer;
RWStructuredBuffer<uint> _HashTable;
// int2 obstacle_pair; obstacle_pair.x = real index, obstacle_pair.y = other obejctacle in the same voxel


StructuredBuffer<float3> _MeshVertices;
StructuredBuffer<int> _MeshTriangleIndices;
float4x4 _MeshLocalToWorld;

float3 _VoxelResolution, _BoundsExtent;
float3 _Radius;
float3 _SmokeOrigin;
float3 _Point;
uint _VoxelCount, _TriangleCount;
float _VoxelSize, _IntersectionBias;

int _MaxFillSteps;

// Ray
float3 _RayOrigin, _RayDirection;
float t;

// Functions that maps 3 Dimensions coordinate (i,j,k) into a 1 Dimesion (i)
uint to1D(uint3 pos) {
    return pos.x + pos.y * _VoxelResolution.x + pos.z * _VoxelResolution.x * _VoxelResolution.y;
}
// Functions that maps 1 Dimesion (i) index into a 3 Dimensions coordinate (i,j,k)
uint3 to3D(uint idx) {
    // voxelRes is a vector of int values, with a magnitud sqrt ( width^2 * height^2 * depth^2 )
    uint3 voxelRes = uint3(_VoxelResolution);
    uint x = idx % (voxelRes.x);
    uint y = (idx / voxelRes.x) % voxelRes.y;
    uint z = idx / (voxelRes.x * voxelRes.y);

    return uint3(x, y, z);
}

// Intersection functions from https://bronsonzgeb.com/index.php/2021/05/29/gpu-mesh-voxelizer-part-2/
struct Triangle { // Object to represent a triangle in 3D
    float3 a, b, c;
};

struct AABB { // Axis Aligned Bounding Box
    float3 center;
    float3 extents;
};

bool IntersectsTriangleAabbSat(float3 v0, float3 v1, float3 v2, float3 aabbExtents, float3 axis) {
    float p0 = dot(v0, axis);
    float p1 = dot(v1, axis);
    float p2 = dot(v2, axis);

    float r = aabbExtents.x * abs(dot(float3(1, 0, 0), axis)) +
              aabbExtents.y * abs(dot(float3(0, 1, 0), axis)) +
              aabbExtents.z * abs(dot(float3(0, 0, 1), axis));

    float maxP = max(p0, max(p1, p2));
    float minP = min(p0, min(p1, p2));

    return !(max(-maxP, minP) > r);
}
// Intersection test of a Axis Align Boundin Box with a triangle
bool IntersectsTriangleAabb(Triangle tri, AABB aabb) {
    tri.a -= aabb.center;
    tri.b -= aabb.center;
    tri.c -= aabb.center;

    float3 ab = normalize(tri.b - tri.a);
    float3 bc = normalize(tri.c - tri.b);
    float3 ca = normalize(tri.a - tri.c);

    //Cross ab, bc, and ca with (1, 0, 0)
    float3 a00 = float3(0.0, -ab.z, ab.y);
    float3 a01 = float3(0.0, -bc.z, bc.y);
    float3 a02 = float3(0.0, -ca.z, ca.y);

    //Cross ab, bc, and ca with (0, 1, 0)
    float3 a10 = float3(ab.z, 0.0, -ab.x);
    float3 a11 = float3(bc.z, 0.0, -bc.x);
    float3 a12 = float3(ca.z, 0.0, -ca.x);

    //Cross ab, bc, and ca with (0, 0, 1)
    float3 a20 = float3(-ab.y, ab.x, 0.0);
    float3 a21 = float3(-bc.y, bc.x, 0.0);
    float3 a22 = float3(-ca.y, ca.x, 0.0);

    if (
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a00) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a01) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a02) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a10) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a11) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a12) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a20) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a21) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a22) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, float3(1, 0, 0)) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, float3(0, 1, 0)) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, float3(0, 0, 1)) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, cross(ab, bc))
    )
        return false;

    return true;
}

// Kernes definitions -----------------------------------------------------------
[numthreads(128,1,1)]
void CS_Clear(uint id : SV_DISPATCHTHREADID) {
    _Voxels[id.x] = 0;
}
//! use of potentially uninitialized variable (IntersectsTriangleAabb) 
// The voxelization process is meant to happend ar compile time, not runtime
[numthreads(128,1,1)]
void CS_VoxelizeMesh(uint id : SV_DISPATCHTHREADID) {
    [branch] //? What is branch?
    if (0 <= id.x && id.x < _VoxelCount) {

        // The linear position on the thread in the x dimension, translates into 3D position
        // This position is in world space, it is a point usually in the left, front low corner of the voxel
        float3 pos = to3D(id.x); 
        float halfVoxelSize = _VoxelSize * 0.5f;

        float3 centerPos = pos * _VoxelSize + halfVoxelSize;
        // This is offsetting the voxel inwards the Bounding volume
        // The Y value is not included becase the voxels start at Y=0 already.
        centerPos.xz -= _BoundsExtent.xz;
        
        AABB aabb;
        aabb.center = centerPos;
        aabb.extents = halfVoxelSize * _IntersectionBias; // How much outside the voxel we want to consider

        // Traverse all the triangles, 
        for (uint i = 0; i < _TriangleCount; i += 3) {
            Triangle tri;
            // Constructs the triangles on the GPU by multiplying each point in local space to the world space and then creating the triangle
            //       Transformation Matrix   *  vector represeing the position (x,y,z,w) in homogeneous coordinates for each vertex A B C
            tri.a = mul(_MeshLocalToWorld,      float4(_MeshVertices[_MeshTriangleIndices[i]],       1.0f)).xyz;
            tri.b = mul(_MeshLocalToWorld,      float4(_MeshVertices[_MeshTriangleIndices[i + 1]],   1.0f)).xyz;
            tri.c = mul(_MeshLocalToWorld,      float4(_MeshVertices[_MeshTriangleIndices[i + 2]],   1.0f)).xyz;
             
            // Run the intersection test between the Axis Aling Bounding Box and the created triangle
            [branch] //? What is branch?
            if (IntersectsTriangleAabb(tri, aabb)) {
                // If there is an intersection, flag the current voxel to 1
                _StaticVoxels[id.x] = 1;
                return;
            }
        }
    }
}

[numthreads(1,1,1)]
void CS_Seed(uint id : SV_DISPATCHTHREADID) {
    float3 seedPos = _SmokeOrigin % _BoundsExtent;
    seedPos.xz += _BoundsExtent.xz; //original
    //seedPos.xzy -= _BoundsExtent.xzy;
    seedPos /= _BoundsExtent * 2;
    seedPos *= _VoxelResolution;

    //_SmokeVoxels[to1D(seedPos)] = _MaxFillSteps; original
    // As we recieved the position in 3D, we map it to 1D
    _SmokeVoxels[to1D(seedPos)] = 1;
}

static int3 offsets[] = {
    int3(1, 0, 0),
    int3(-1, 0, 0),
    int3(0, 1, 0),
    int3(0, -1, 0),
    int3(0, 0, 1),
    int3(0, 0, -1)
};

[numthreads(128, 1, 1)]
void CS_FillStep(uint id : SV_DISPATCHTHREADID) {
    [branch]
    if (0 <= id.x && id.x < _VoxelCount) {
        int voxel = _SmokeVoxels[id.x];
        int staticVoxel = _StaticVoxels[id.x];

        // Already filled in
        if (voxel.x > 0) {
            _PingVoxels[id.x] = voxel;
            return;
        }

        int3 voxelPos = to3D(id.x);

        float3 pos = voxelPos;
        float halfVoxelSize = _VoxelSize * 0.5f;

        float3 centerPos = pos * _VoxelSize + halfVoxelSize - float3(_BoundsExtent.x, 0, _BoundsExtent.z) - _SmokeOrigin;

        // Outside radius
        if (length(centerPos / _Radius) > 1) {
            _PingVoxels[id.x] = 0;
            return;
        }

        int distance = 0;

        for (int offset = 0; offset < 6; ++offset) {
            int3 samplePos = voxelPos + offsets[offset];
            if (any(samplePos < 0) || any(_VoxelResolution < samplePos)) continue;

            int idx = to1D(samplePos);
            int v = _SmokeVoxels[idx].x;
            distance = max(distance, v);
        }

        if (staticVoxel && distance > 1) {
            distance = 2;
        }


        _PingVoxels[id.x] = max(0, distance - 1);
    }
}

[numthreads(128, 1, 1)]
void CS_PingPong(uint id : SV_DISPATCHTHREADID) {
    _Voxels[id.x] = _PingVoxels[id.x];
}

[numthreads(1,1,1)]
void CS_QueryPosition(uint id : SV_DISPATCHTHREADID)
{
    float3 pointPos = _Point % (_BoundsExtent * 2.0);
    pointPos.xz += _BoundsExtent.xz; 
    pointPos /= _BoundsExtent * 2;
    pointPos *= _VoxelResolution;

    _Voxels[to1D(pointPos)] = 1;
}

[numthreads(1,1,1)]
void CS_RayAABBIntersections(uint id : SV_DISPATCHTHREADID)
{
    // GS GridSpace
    float3 rayPosGS = _RayOrigin % (_BoundsExtent * 2.0);
    rayPosGS.xz += _BoundsExtent.xz; 
    rayPosGS /= _BoundsExtent * 2;
    rayPosGS *= _VoxelResolution;

    _Voxels[to1D(rayPosGS)] = 1;
    // range or step the ray will march to compute an in intersection with the plane.
    // Compare if the direction of the ray is opposite with the world Normal, to knoe if the voxel is being hit from front or back
    // Check if the ray is not parallel or has passed certain threshold
    // to the intersection test per axis align plane, meaning three times
    // Get a point of intersection
    // Compare the point with the voxels
    // Shade the voxels

    if (0 <= id.x && id.x < _VoxelCount)
    {

    }
}

// Counts how many obstacle probes there are in the current voxel
[numthreads(128,1,1)]
void CS_HashObstaclesInGrid(uint id: SV_DISPATCHTHREADID, uint3 groupID : SV_GroupID)
{
    if( 0 <= id.x && id.x < _ObstacleProbesCount)
    {
        
            float3 probePos = _ObstacleProbesPositions[id.x]  % (_BoundsExtent * 2.0);
            probePos.xz += _BoundsExtent.xz; 
            probePos /= _BoundsExtent * 2;
            probePos *= _VoxelResolution;

            // 1. Compute where the probe is inside the voxel grid, mapped to 1D
            uint voxel_index = to1D(probePos);
            
            //! IMPORTANT Direct increment operations (+=) are not thread-safe when multiple threads target the same memory location.
            /*
            _PivotsTableBuffer[voxel_index].x += 1; 
            do not work as expected because increment operations are not atomic. 
            When multiple threads try to increment the same value at the same time, a race condition occurs. 
            The result is that the value often stays the same or updates inconsistently.
            */
            //* This HLSL ansure safe access to the memory when multiple threads try to write
            InterlockedAdd(_PivotsTableBuffer[voxel_index].x, 1); // Atomic operations

            _HashedObstacleNodes[id.x].x = voxel_index;
            _HashedObstacleNodes[id.x].y = _PivotsTableBuffer[voxel_index].y; // Recording the previos obstacle, before uptdating.
            
            //_PivotsTableBuffer[voxel_index].y = id.x; // The initial value is -1
            int original;
            InterlockedExchange(_PivotsTableBuffer[voxel_index].y, id.x, original); // Writes id.x only if no other writes occurred at the same time
            
    }
}

/*
// Testing, add 1 to all voxels
        //_ObstaclesCounterVoxels[id.x] = 1;
        //uint o = id.x;
        //_ObstaclesCounterVoxels[id.x] = 0;
        // for(uint o = 0; o < _ObstacleProbesCount; o ++)
        // {
            // Map obstacle positions to grid space
            //_ObstacleProbesPositions[o]


            // 2. Increase the counter at that voxel.
            // In this model, the total amount of obstacle for a voxel is fixed and arbitrarly user-defined
            //_ObstaclesCounterVoxels[voxel_index] += 1;

            //_ObstacleIndexBuffer[o] = voxel_index;

//_HashedObstacleNodes[]

            // 3. Now the counter at that voxel is the size, so we can get an index by substracting one, getting the item added
            //uint index_in_voxel = (uint)_ObstaclesCounterVoxels[voxel_index] - 1;

            // 4. In the new hash table, we use the voxel_index, and then store the real index of that
            // recently added obstacle into the array.
            // _ObstacleHashTable[voxel_index].real_indexes[index_in_voxel] = o;
            
            //if(id.x == to1D(probePos));
        //}
        //int accum = 0;

        // for(uint u = 0; u < (uint)_PivotsTableBuffer[id.x].x; u++)
        // {
        //     _PivotsTableBuffer[id.x].y = accum;
        //     accum += _PivotsTableBuffer[id.x].x;
        //     _PivotsTableBuffer[id.x].z = accum;
        // }

        // for(uint ob = 0; ob < (uint)_ObstacleProbesCount; ob ++)
        // {
        //     int ob_i = _ObstacleIndexBuffer[ob] - 1;
        //     _HashTable[_PivotsTableBuffer[ob_i].z] = ob;

        //     _PivotsTableBuffer[ob_i].z -= 1;
        // }

*/